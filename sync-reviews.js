import axios from 'axios';
import fs from 'fs';
import slugify from 'slugify';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const WEBFLOW_API_TOKEN = process.env.WEBFLOW_API_TOKEN;
const WEBFLOW_COLLECTION_ID = process.env.WEBFLOW_COLLECTION_ID;

const PLACE_ID = 'ChIJiSPKJ1bxCkcRz6wptMDp4Uo';
const CACHE_FILE = './review-cache.json';

// Validace environment variables
function validateEnvVars() {
  const required = ['GOOGLE_API_KEY', 'WEBFLOW_API_TOKEN', 'WEBFLOW_COLLECTION_ID'];
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    console.error(`‚ùå Chybƒõj√≠c√≠ environment variables: ${missing.join(', ')}`);
    process.exit(1);
  }
}

async function fetchGoogleReviews() {
  try {
    console.log('üîç Stahov√°n√≠ recenz√≠ z Google Places API...');
    const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${PLACE_ID}&key=${GOOGLE_API_KEY}&language=cs&reviews_sort=newest`;
    
    const response = await axios.get(url);
    
    if (response.data.status !== 'OK') {
      throw new Error(`Google API error: ${response.data.status} - ${response.data.error_message || 'Unknown error'}`);
    }
    
    const place = response.data.result;
    
    if (!place) {
      throw new Error('M√≠sto nebylo nalezeno');
    }
    
    return {
      placeUrl: place.url || '',
      reviews: place.reviews || []
    };
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi stahov√°n√≠ Google recenz√≠:', error.message);
    throw error;
  }
}

function loadCache() {
  try {
    if (fs.existsSync(CACHE_FILE)) {
      const data = fs.readFileSync(CACHE_FILE, 'utf8');
      return JSON.parse(data);
    }
    return { reviewIds: [] };
  } catch (error) {
    console.warn('‚ö†Ô∏è Nelze naƒç√≠st cache, vytv√°≈ô√≠m nov√Ω:', error.message);
    return { reviewIds: [] };
  }
}

function saveCache(cache) {
  try {
    fs.writeFileSync(CACHE_FILE, JSON.stringify(cache, null, 2), 'utf8');
    console.log('üíæ Cache ulo≈æena');
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi ukl√°d√°n√≠ cache:', error.message);
  }
}

function toSlug(name, id) {
  const cleanName = name.replace(/[^\w\s-]/g, '').trim();
  return slugify(`${cleanName}-${id}`, { lower: true, strict: true });
}

function buildItemPayload(review, placeUrl) {
  // Validace review dat
  if (!review.author_name || !review.rating || !review.time) {
    throw new Error('Neplatn√° data recenze');
  }

  // Sanitizace textu recenze
  const reviewText = review.text ? review.text.replace(/<[^>]*>/g, '') : '';
  
  return {
    isArchived: false,
    isDraft: false,
    fieldData: {
      name: review.author_name.substring(0, 100), // Omezen√≠ d√©lky
      slug: toSlug(review.author_name, review.time),
      rating: Math.min(Math.max(review.rating, 1), 5), // Zaji≈°tƒõn√≠ rozpƒõt√≠ 1-5
      text: reviewText ? `<p>${reviewText}</p>` : '<p>Bez koment√°≈ôe</p>',
      date: new Date(review.time * 1000).toISOString(),
      source: 'Google',
      avatar: review.profile_photo_url || '',
      reviewUrl: placeUrl,
      reviewId: review.time.toString(),
    }
  };
}

async function sendToWebflow(item) {
  try {
    const url = `https://api.webflow.com/v2/collections/${WEBFLOW_COLLECTION_ID}/items?live=true`;
    
    const response = await axios.post(url, item, {
      headers: {
        Authorization: `Bearer ${WEBFLOW_API_TOKEN}`,
        'Content-Type': 'application/json',
        Accept: 'application/json'
      },
      timeout: 30000 // 30 sekund timeout
    });
    
    console.log(`   ‚úÖ √öspƒõ≈°nƒõ nahr√°no - itemId: ${response.data.id}`);
    return response.data;
  } catch (error) {
    let errorMessage = 'Nezn√°m√° chyba';
    
    if (error.response) {
      // Server odpovƒõdƒõl s chybov√Ωm stavem
      errorMessage = `HTTP ${error.response.status}: ${JSON.stringify(error.response.data)}`;
    } else if (error.request) {
      // Po≈æadavek byl odesl√°n, ale nebyla obdr≈æena odpovƒõƒè
      errorMessage = '≈Ω√°dn√° odpovƒõƒè od serveru';
    } else {
      // Chyba p≈ôi vytv√°≈ôen√≠ po≈æadavku
      errorMessage = error.message;
    }
    
    console.error(`   ‚ùå Webflow error: ${errorMessage}`);
    throw error;
  }
}

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function main() {
  try {
    console.log('üöÄ Spou≈°t√≠m synchronizaci recenz√≠...');
    
    // Validace
    validateEnvVars();
    
    // Sta≈æen√≠ recenz√≠ z Google
    const { placeUrl, reviews } = await fetchGoogleReviews();
    
    // Naƒçten√≠ cache
    const cache = loadCache();
    
    // Filtrov√°n√≠ nov√Ωch recenz√≠
    const newOnes = reviews.filter(r => !cache.reviewIds.includes(r.time.toString()));
    
    console.log(`\nüìä Statistiky:`);
    console.log(`   üìà Celkem recenz√≠ z Google: ${reviews.length}`);
    console.log(`   üÜï Nov√Ωch recenz√≠: ${newOnes.length}`);
    console.log(`   üíæ V cache: ${cache.reviewIds.length}`);
    
    if (newOnes.length === 0) {
      console.log('‚úÖ ≈Ω√°dn√© nov√© recenze k nahr√°n√≠');
      return;
    }
    
    console.log(`\nüÜï P≈ôehled nov√Ωch recenz√≠:`);
    newOnes.forEach(r => {
      console.log(`   ‚Ä¢ ${r.author_name} (${r.rating}‚òÖ) ‚Äì ${new Date(r.time * 1000).toLocaleDateString('cs-CZ')}`);
    });
    
    // Nahr√°v√°n√≠ do Webflow
    console.log('\nüì§ Nahr√°v√°n√≠m do Webflow...');
    const uploadedIds = [];
    
    for (const [index, review] of newOnes.entries()) {
      try {
        console.log(`üì§ [${index + 1}/${newOnes.length}] Nahr√°v√°m: ${review.author_name}`);
        
        const item = buildItemPayload(review, placeUrl);
        await sendToWebflow(item);
        
        uploadedIds.push(review.time.toString());
        
        // Pauza mezi po≈æadavky aby se p≈ôede≈°lo rate limiting
        if (index < newOnes.length - 1) {
          await delay(1000);
        }
        
      } catch (error) {
        console.error(`‚ùå Chyba p≈ôi nahr√°v√°n√≠ recenze ${review.author_name}:`, error.message);
        // Pokraƒçujeme s dal≈°√≠mi recenzemi
      }
    }
    
    // Aktualizace cache pouze pro √∫spƒõ≈°nƒõ nahran√© recenze
    if (uploadedIds.length > 0) {
      cache.reviewIds.push(...uploadedIds);
      saveCache(cache);
      console.log(`‚úÖ √öspƒõ≈°nƒõ nahr√°no ${uploadedIds.length} nov√Ωch recenz√≠`);
    }
    
    console.log('\nüéâ Synchronizace dokonƒçena!');
    
  } catch (error) {
    console.error('‚ùå Kritick√° chyba:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Spu≈°tƒõn√≠
main();